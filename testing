## Fourier Sound Processing
## 1. Open sound file
## 2. Extract sound values into soundArr
## 3. Create nsoundArr of size 2^x to pad
## Note: Fast fourier transform needs 2^x inputs
## 4. Scale from 0 to 765 ( 255 * 3 )
## 5. Calculate number of bins
## 6. Generate histogram

from cmath import exp, pi

## Open sound file, get array of data
soundArr = []
fileName=pickAFile()
sound=makeSound(fileName)
for i in range( 0 , getLength(sound) ):
 value = getSampleValueAt(sound,i)
 soundArr.append(value)

## Create array size of 2^x
## insert array into the new
## resulting in zero padding
x = len(soundArr)
next = 2**(math.ceil(math.log(x, 2)))
nsoundArr = [0] * int(next)
for index, i in enumerate(soundArr):
  nsoundArr[index] = soundArr[index]

## Calculate the discreet fast fourier transform
## Based on Cooley Tukey FFT algorithm
def fft(x):
   N = len(x)
   if N <= 1: return x
   even = fft(x[0::2])
   odd =  fft(x[1::2])
   T= [exp(-2j*pi*k/N)*odd[k] for k in xrange(N/2)]
   return [even[k] + T[k] for k in xrange(N/2)] + \
          [even[k] - T[k] for k in xrange(N/2)]

def translate(value, low, high, t_lower, t_upper):
    # Figure out how 'wide' each range is
    leftSpan = high - low
    rightSpan = t_upper - t_lower

    # Convert the left range into a 0-1 range (float)
    valueScaled = float(value - low) / float(leftSpan)

    # Convert the 0-1 range into a value in the right range.
    return t_lower + (valueScaled * rightSpan)
    
#Calculate the color value for each pixel
def getColor(imgPixel):
  if imgPixel <= 255:
    color = (imgPixel, 255, 255)
  elif imgPixel <= 510:
    color = (255, (510 - imgPixel),255)
  else: # Color must be imgPixel - 2*255
    color = (255, 255, (756 - imgPixel))
  
  return color
  
## Perform the fast fourier transform on the data
## python can not unpack the array because of the size
freq = []
freq_img = fft(nsoundArr)
for coord in freq_img:
  freq.append(coord.real)

## Scale the transform values
## from 0 to 765
imgPixels = []
imgColors = []
maxFreq = max(freq)
minFreq = min(freq)

for f in freq:
  imgPixels.append(translate(f,minFreq,maxFreq,0,765))

for item in imgPixels:
  imgColors.append(getColor(round(item)))

width = int(round(sqrt(len(imgColors))))
height = int(round(sqrt(len(imgColors))))

index = 0 
spectrogram = makeEmptyPicture(width, height, white)
for x in range(0, width):
  for y in range(0, height):
    if i < len(imgColors):
      pixel = getPixelAt(spectrogram,x,y)
      newColor = makeColor(imgColors[i][0],imgColors[i][1],imgColors[i][2])
      setColor(pixel, newColor)
      i = i + 1
      
show(spectrogram)
